{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","process","console","log","App","React","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","evt","target","value","onKeyPress","key","fetch","then","res","json","result","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLAGMA,EACCC,mCADDD,EAEE,2CAwBRE,QAAQC,IArBK,kcA0GEC,MAnFf,WAAgB,IAAD,EACaC,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEiBH,IAAMC,SAAS,IAFhC,mBAENG,EAFM,KAEGC,EAFH,KAiDb,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAuB,MAA1G,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBACEG,KAAK,OACLH,UAAU,aACVI,YAAY,oBACZC,SAAU,SAACC,GAAD,OAAST,EAASS,EAAIC,OAAOC,QACvCA,MAAOZ,EACPa,WAvDK,SAACH,GACE,UAAZA,EAAII,KACNC,MAAM,GAAD,OAAItB,EAAJ,qBAAyBO,EAAzB,+BAAqDP,IACvDuB,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLlB,EAAS,IACTE,EAAWgB,GACXxB,QAAQC,IAAIuB,WAmDU,oBAAhBjB,EAAQG,KACd,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQkB,KADX,IACkBlB,EAAQmB,IAAIC,WAE9B,qBAAKlB,UAAU,OAAf,SApDQ,SAACmB,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YAEjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAqBDE,CAAY,IAAIC,WAEzC,sBAAK7B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UAAuB8B,KAAKC,MAAMjC,EAAQG,KAAKC,MAA/C,WACA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAIjD,SC/FK+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.33617fcc.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nconst message = `\n.------\\ /------.\n|       -       |\n|               |\n|               |\n|               |\n_______________________\n===========.===========\n/ ~~~~~     ~~~~~ \\\n/|     |     |\\\nW   ---  / \\  ---   W\n\\.      |o o|      ./\n|                 |\n\\    #########    /\n\\  ## ----- ##  /\n \\##         ##/\n  \\_____v_____/\n\n  What are you doing here mortal? This is too advanced, get out of here!\n  Wait here's a fun challenge, try to find my api key.\n`;\nconsole.log(message);\n\nfunction App() {\n  const [query, setQuery] = React.useState(\"\");\n  const [weather, setWeather] = React.useState({});\n\n  const search = (evt) => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((res) => res.json())\n        .then((result) => {\n          setQuery(\"\");\n          setWeather(result);\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app warm' : 'app' ) : 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search for a city\"\n            onChange={(evt) => setQuery(evt.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name} {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}